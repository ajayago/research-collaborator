scalar GraphQLDate

type Organization {
    _id: ID!
    serial_no: Int!
    org_name: String!
    org_short_name: String!
}

"Without system generated values"
input OrganizationInputs {
    org_name: String!
    org_short_name: String!
}

type pending_output_user
{
    name: String!
    role: String!
    projectID : String!
    reqfrom: String!
    projectName: String!

}

type User {
    _id: ID!
    username: String!
    password: String!
    org_short_name: String!
    google_auth: Boolean!
    pending: [pending_output_user]
    accepted: [pending_output_user]
    
}

input pending_requests
{
    name: String
    role: String
}

input collab_req
{
    name: String
    role: String
}



type pending_output
{
    name: String
    role: String
}



type collab_output
{
    name: String
    role: String
}

input Requests
{
    name: String!
    role: String!
    projectID: String!
    reqfrom: String!
    projectName: String!
}

input RequestData
{
    name: String!
    role: String!
    projectID: String!
}


input UserInputs {
    username: String!
    password: String!
    org_short_name: String!
    google_auth: Boolean = false
    pending: [RequestData]
    accepted: [RequestData]
}

input ProjectData
{
    projectID: String! 
    name: String! 
    owner: String!
    desc: String!
    pending: [pending_requests]
    collab:  [collab_req]
}

type ProjectRec
{
    projectID : String!
    name: String!
    owner: String!
    desc: String!
    
}

type OutputRequest
{
    name: String!
    role: String!
    projectID: String!
    reqfrom: String!
    projectName: String!

}

input LitSurveyItem
{
    paper_title: String!
    publisher_name: String!
    doi: String!
}

type LitSurveyItemOutput
{
    paper_title: String!
    publisher_name: String!
    doi: String!
}

type ProjectDetails
{
    projectID: String!
    activeTabList: [Boolean!]!
    litsurveyarray: [LitSurveyItemOutput]
    problemstatement: String!
    experimentation: String!
    comments: [String]
}

type Query {
    getOrganization(org_short_name: String!): [Organization!]!
    getExistingUsers(username: String!): [User!]!
    getAllOrganization(org: String=""): [Organization!]!
    getProjectDetails(owner : String!): [ProjectRec!]!
    getProjectDetailsFromProjectID(projectID: String!): [ProjectRec!]!
    getProjectDetailsInner(projectID: String!): ProjectDetails!
}

type Mutation {
    addOrganization(org: OrganizationInputs!): Organization!
    addNewUser(user: UserInputs!): User!
    addProjectDetails(field : ProjectData!): ProjectRec!
    addNewRequests(field : Requests!): OutputRequest!
    updateActiveTabList(projectID: String!, activeTabList: [Boolean]): ProjectDetails!
    updateLitSurvey(projectID: String!, litsurveyarray: [LitSurveyItem]): ProjectDetails!
    updateProblemStatement(projectID: String!, problemstatement: String!): ProjectDetails!
    updateExperimentation(projectID: String!, experimentation: String!): ProjectDetails!
    updateComments(projectID: String!, comments: [String]): ProjectDetails!
}